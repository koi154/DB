USE codingon_store_db;

select * FROM customers;

select * 
FROM customers c
	JOIN orders o
	on c.customer_id = o.customer_id;
    
select c.customer_id, name, email, order_date, order_status
FROM customers c
	JOIN orders o
	on c.customer_id = o.customer_id
WHERE email IS NOT NULL
ORDER BY order_date DESC
LIMIT 3;

-- LEFT OUTER JOIN 
select c.customer_id, name, email, order_date, order_status
FROM customers c
	LEFT JOIN orders o
	on c.customer_id = o.customer_id;
    
-- RIGHT OUTER JOIN
select c.customer_id, name, email, order_date, order_status
FROM customers c
	RIGHT JOIN orders o
	on c.customer_id = o.customer_id;

-- UNION
SELECT name, email from customers
UNION
SELECT order_date, order_status from orders;

-- FULL OUTER JOIN
select c.customer_id, name, email, order_date, order_status
FROM customers c
	LEFT JOIN orders o
	on c.customer_id = o.customer_id
UNION
select c.customer_id, name, email, order_date, order_status
FROM customers c
	RIGHT JOIN orders o
	on c.customer_id = o.customer_id;
    
-- 어떤 고객이
-- 어떤 주문을 했으며(주문ID)
-- 어떤 상품을 주문했고(상황ID)
-- 몇개 샀고(수령)
-- 상품 이름은 무엇이며
-- 얼마에 샀는가

SELECT c.name, o.order_id, p.product_id, p.name, oi.quantity, p.price
FROM customers c
	JOIN orders o ON c.customer_id = o.customer_id
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id;
    
-- CROSS JOIN
USE codingon_db;

select * FROM class
cross JOIN student;

-- SELF JOIN

SELECT e.name, m.name
FROM employees e
	LEFT JOIN employees m
    ON e.manager_id = m.employee_id;
    
SELECT e.name, m.name
FROM employees e
	JOIN employees m
    ON e.manager_id = m.employee_id;
    
